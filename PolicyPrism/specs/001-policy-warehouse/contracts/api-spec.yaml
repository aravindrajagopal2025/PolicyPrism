openapi: 3.1.0
info:
  title: Policy Warehouse API
  description: |
    REST API for the Policy Warehouse system. Provides endpoints for:
    - Policy document ingestion (manual upload and automated scraping)
    - Structured policy data retrieval
    - Search and filtering across policies
    - Cross-payer policy comparison
    - Administrative functions (user management, scraping configuration)
  version: 1.0.0
  contact:
    name: Policy Warehouse Team

servers:
  - url: https://api.policywarehouse.example.com/v1
    description: Production
  - url: https://staging-api.policywarehouse.example.com/v1
    description: Staging
  - url: http://localhost:8000/v1
    description: Local development

tags:
  - name: Ingestion
    description: Policy document upload and processing
  - name: Policies
    description: Policy document retrieval and management
  - name: Search
    description: Search and filtering across policies
  - name: Comparison
    description: Cross-payer policy comparison
  - name: Scraping
    description: Automated scraping configuration and management
  - name: Admin
    description: Administrative functions (user management, audit logs)
  - name: Auth
    description: Authentication and authorization

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Core Entities
    PolicyDocument:
      type: object
      required:
        - id
        - payer_id
        - policy_name
        - effective_date
        - version
        - processing_status
      properties:
        id:
          type: string
          format: uuid
        payer_id:
          type: string
          format: uuid
        payer_name:
          type: string
        policy_name:
          type: string
        policy_number:
          type: string
          nullable: true
        effective_date:
          type: string
          format: date
        expiration_date:
          type: string
          format: date
          nullable: true
        version:
          type: integer
          minimum: 1
        document_type:
          type: string
          enum: [MEDICAL, PHARMACY, DENTAL, VISION, OTHER]
        source_url:
          type: string
          format: uri
          nullable: true
        pdf_storage_path:
          type: string
        pdf_file_size_bytes:
          type: integer
        pdf_page_count:
          type: integer
        processing_status:
          type: string
          enum: [QUEUED, EXTRACTING_TEXT, STRUCTURING_DATA, COMPLETE, FAILED, PENDING_REVIEW]
        extraction_confidence_score:
          type: number
          format: float
          minimum: 0.0
          maximum: 1.0
          nullable: true
        requires_manual_review:
          type: boolean
        is_deleted:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    PolicySection:
      type: object
      required:
        - id
        - policy_document_id
        - section_type
        - title
        - content_text
      properties:
        id:
          type: string
          format: uuid
        policy_document_id:
          type: string
          format: uuid
        section_type:
          type: string
          enum: [COVERAGE_CRITERIA, EXCLUSIONS, REQUIREMENTS, DEFINITIONS, PRIOR_AUTHORIZATION, LIMITATIONS, APPEALS_PROCESS, OTHER]
        section_number:
          type: string
          nullable: true
        title:
          type: string
        content_text:
          type: string
        content_structured:
          type: object
          nullable: true
        extraction_confidence_score:
          type: number
          format: float
          minimum: 0.0
          maximum: 1.0
          nullable: true
        page_numbers:
          type: array
          items:
            type: integer
        order_index:
          type: integer

    CoverageCriteria:
      type: object
      required:
        - id
        - policy_section_id
        - procedure_name
        - covered_scenarios
      properties:
        id:
          type: string
          format: uuid
        policy_section_id:
          type: string
          format: uuid
        procedure_name:
          type: string
        procedure_code:
          type: string
          nullable: true
        covered_scenarios:
          type: string
        required_documentation:
          type: string
          nullable: true
        prior_authorization_required:
          type: boolean
        age_restrictions:
          type: string
          nullable: true
        frequency_limitations:
          type: string
          nullable: true
        extraction_confidence_score:
          type: number
          format: float
          minimum: 0.0
          maximum: 1.0
          nullable: true

    Exclusion:
      type: object
      required:
        - id
        - policy_section_id
        - excluded_procedure
      properties:
        id:
          type: string
          format: uuid
        policy_section_id:
          type: string
          format: uuid
        excluded_procedure:
          type: string
        exclusion_rationale:
          type: string
          nullable: true
        exceptions_to_exclusion:
          type: string
          nullable: true
        extraction_confidence_score:
          type: number
          format: float
          minimum: 0.0
          maximum: 1.0
          nullable: true

    Payer:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        website_url:
          type: string
          format: uri
          nullable: true
        scraping_enabled:
          type: boolean
        last_scrape_at:
          type: string
          format: date-time
          nullable: true
        next_scrape_at:
          type: string
          format: date-time
          nullable: true
        is_active:
          type: boolean

    ProcessingJob:
      type: object
      required:
        - id
        - job_type
        - status
      properties:
        id:
          type: string
          format: uuid
        job_type:
          type: string
          enum: [INGESTION, SCRAPING]
        status:
          type: string
          enum: [PENDING, RUNNING, RETRYING, COMPLETED, FAILED, CANCELLED]
        payer_id:
          type: string
          format: uuid
          nullable: true
        policy_document_id:
          type: string
          format: uuid
          nullable: true
        started_at:
          type: string
          format: date-time
          nullable: true
        completed_at:
          type: string
          format: date-time
          nullable: true
        retry_count:
          type: integer
        max_retries:
          type: integer
        error_message:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time

    User:
      type: object
      required:
        - id
        - username
        - email
        - role
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
          enum: [ANALYST, ADMINISTRATOR]
        first_name:
          type: string
          nullable: true
        last_name:
          type: string
          nullable: true
        is_active:
          type: boolean
        last_login_at:
          type: string
          format: date-time
          nullable: true
        created_at:
          type: string
          format: date-time

    # Request/Response Models
    UploadPolicyRequest:
      type: object
      required:
        - payer_id
        - file
      properties:
        payer_id:
          type: string
          format: uuid
        policy_name:
          type: string
          description: Optional override for policy name (otherwise extracted)
        effective_date:
          type: string
          format: date
          description: Optional override for effective date (otherwise extracted)

    UploadPolicyResponse:
      type: object
      properties:
        policy_document_id:
          type: string
          format: uuid
        processing_job_id:
          type: string
          format: uuid
        status:
          type: string
          enum: [QUEUED]
        message:
          type: string

    SearchRequest:
      type: object
      required:
        - query
      properties:
        query:
          type: string
          description: Search query string
        payer_ids:
          type: array
          items:
            type: string
            format: uuid
          description: Filter by specific payers
        effective_date_from:
          type: string
          format: date
        effective_date_to:
          type: string
          format: date
        document_types:
          type: array
          items:
            type: string
            enum: [MEDICAL, PHARMACY, DENTAL, VISION, OTHER]
        section_types:
          type: array
          items:
            type: string
            enum: [COVERAGE_CRITERIA, EXCLUSIONS, REQUIREMENTS, DEFINITIONS, PRIOR_AUTHORIZATION, LIMITATIONS, APPEALS_PROCESS, OTHER]
        limit:
          type: integer
          default: 20
          minimum: 1
          maximum: 100
        offset:
          type: integer
          default: 0
          minimum: 0

    SearchResponse:
      type: object
      properties:
        total_results:
          type: integer
        results:
          type: array
          items:
            $ref: '#/components/schemas/SearchResult'
        query:
          type: string
        filters_applied:
          type: object

    SearchResult:
      type: object
      properties:
        policy_document:
          $ref: '#/components/schemas/PolicyDocument'
        matching_sections:
          type: array
          items:
            type: object
            properties:
              section:
                $ref: '#/components/schemas/PolicySection'
              highlights:
                type: array
                items:
                  type: string
              relevance_score:
                type: number
                format: float

    ComparisonRequest:
      type: object
      required:
        - policy_document_ids
        - comparison_topic
      properties:
        policy_document_ids:
          type: array
          items:
            type: string
            format: uuid
          minItems: 2
          maxItems: 5
        comparison_topic:
          type: string
          description: Topic to compare (e.g., "knee replacement surgery")
        section_types:
          type: array
          items:
            type: string
            enum: [COVERAGE_CRITERIA, EXCLUSIONS, REQUIREMENTS, PRIOR_AUTHORIZATION]

    ComparisonResponse:
      type: object
      properties:
        comparison_topic:
          type: string
        policies:
          type: array
          items:
            type: object
            properties:
              policy_document:
                $ref: '#/components/schemas/PolicyDocument'
              relevant_sections:
                type: array
                items:
                  $ref: '#/components/schemas/PolicySection'
              coverage_criteria:
                type: array
                items:
                  $ref: '#/components/schemas/CoverageCriteria'
              exclusions:
                type: array
                items:
                  $ref: '#/components/schemas/Exclusion'
        differences_summary:
          type: array
          items:
            type: object
            properties:
              aspect:
                type: string
              payer_differences:
                type: object

    ScrapingConfigRequest:
      type: object
      required:
        - payer_id
        - scraping_config
      properties:
        payer_id:
          type: string
          format: uuid
        scraping_enabled:
          type: boolean
        scraping_config:
          type: object
          properties:
            base_url:
              type: string
              format: uri
            policy_list_selector:
              type: string
            policy_link_selector:
              type: string
            schedule_cron:
              type: string
              description: Cron expression for scraping schedule

    Error:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        details:
          type: object

security:
  - BearerAuth: []

paths:
  # Authentication
  /auth/login:
    post:
      tags: [Auth]
      summary: User login
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, password]
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  token_type:
                    type: string
                  expires_in:
                    type: integer
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/me:
    get:
      tags: [Auth]
      summary: Get current user
      responses:
        '200':
          description: Current user details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  # Ingestion
  /ingestion/upload:
    post:
      tags: [Ingestion]
      summary: Upload policy document
      description: Upload a PDF policy document for processing (Administrator only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [payer_id, file]
              properties:
                payer_id:
                  type: string
                  format: uuid
                file:
                  type: string
                  format: binary
                policy_name:
                  type: string
                effective_date:
                  type: string
                  format: date
      responses:
        '202':
          description: Document accepted for processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadPolicyResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /ingestion/jobs/{job_id}:
    get:
      tags: [Ingestion]
      summary: Get processing job status
      parameters:
        - name: job_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Job status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessingJob'
        '404':
          description: Job not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Policies
  /policies:
    get:
      tags: [Policies]
      summary: List policy documents
      parameters:
        - name: payer_id
          in: query
          schema:
            type: string
            format: uuid
        - name: document_type
          in: query
          schema:
            type: string
            enum: [MEDICAL, PHARMACY, DENTAL, VISION, OTHER]
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: List of policy documents
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                  policies:
                    type: array
                    items:
                      $ref: '#/components/schemas/PolicyDocument'

  /policies/{policy_id}:
    get:
      tags: [Policies]
      summary: Get policy document details
      parameters:
        - name: policy_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Policy document details
          content:
            application/json:
              schema:
                type: object
                properties:
                  policy:
                    $ref: '#/components/schemas/PolicyDocument'
                  sections:
                    type: array
                    items:
                      $ref: '#/components/schemas/PolicySection'
        '404':
          description: Policy not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /policies/{policy_id}/sections/{section_id}:
    get:
      tags: [Policies]
      summary: Get policy section details
      parameters:
        - name: policy_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: section_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Section details with extracted entities
          content:
            application/json:
              schema:
                type: object
                properties:
                  section:
                    $ref: '#/components/schemas/PolicySection'
                  coverage_criteria:
                    type: array
                    items:
                      $ref: '#/components/schemas/CoverageCriteria'
                  exclusions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Exclusion'

  # Search
  /search:
    post:
      tags: [Search]
      summary: Search across policies
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequest'
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'

  # Comparison
  /comparison:
    post:
      tags: [Comparison]
      summary: Compare policies across payers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComparisonRequest'
      responses:
        '200':
          description: Policy comparison results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComparisonResponse'

  # Scraping
  /scraping/payers:
    get:
      tags: [Scraping]
      summary: List payers with scraping configuration
      responses:
        '200':
          description: List of payers
          content:
            application/json:
              schema:
                type: object
                properties:
                  payers:
                    type: array
                    items:
                      $ref: '#/components/schemas/Payer'

  /scraping/payers/{payer_id}/config:
    put:
      tags: [Scraping]
      summary: Update payer scraping configuration (Administrator only)
      parameters:
        - name: payer_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScrapingConfigRequest'
      responses:
        '200':
          description: Configuration updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payer'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /scraping/payers/{payer_id}/trigger:
    post:
      tags: [Scraping]
      summary: Manually trigger scraping job (Administrator only)
      parameters:
        - name: payer_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '202':
          description: Scraping job started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessingJob'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Admin
  /admin/users:
    get:
      tags: [Admin]
      summary: List users (Administrator only)
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags: [Admin]
      summary: Create new user (Administrator only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, email, password, role]
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                role:
                  type: string
                  enum: [ANALYST, ADMINISTRATOR]
                first_name:
                  type: string
                last_name:
                  type: string
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/audit-logs:
    get:
      tags: [Admin]
      summary: Get audit logs (Administrator only)
      parameters:
        - name: user_id
          in: query
          schema:
            type: string
            format: uuid
        - name: action_type
          in: query
          schema:
            type: string
        - name: from_date
          in: query
          schema:
            type: string
            format: date-time
        - name: to_date
          in: query
          schema:
            type: string
            format: date-time
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
      responses:
        '200':
          description: Audit logs
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                  logs:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        user_id:
                          type: string
                          format: uuid
                        action_type:
                          type: string
                        resource_type:
                          type: string
                        resource_id:
                          type: string
                          format: uuid
                        timestamp:
                          type: string
                          format: date-time
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
